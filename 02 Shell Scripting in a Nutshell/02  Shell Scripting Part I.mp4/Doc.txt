
    Shell Scripting (Part One)

        What You Will Learn

            * What scripts are;
            * The components that make up a script;
            * How to use variables in your scripts;
            * How to perform tests and make decisions;
            * How to accept command line arguments;
            * How to accept input from a user.

        Scripts

            * Contain a series of commands;
            * An interpreter executes commands in the script.
            * Anything you can type at the command line, you can put in a script.
            * Great for automating tasks.

            script.sh

                #!/bin/bash

                echo "Scripting is fun!"

            The interpreter executes the script
                $ chmod 755 script.sh
                $ ./script.sh
                    > Scripting is fun!

        Shebang

            #!/bin/csh
            echo "This script uses csh as interpreter"

            #!/bin/ksh
            echo "This script uses ksh as interpreter"

            #!/bin/zsh
            echo "This script uses zsh as interpreter"

            sleepy.sh

                #!/bin/bash

                sleep 90

            The interpreter executes the script

                $ chmod 755 sleepy.sh
                $ ./sleepy.sh
                $ ./sleepy.sh &
                    >[1] 12685
                $ ps -fp 12685
                    >UID        PID  PPID  C STIME TTY          TIME CMD
                    >admin1   12685  7273  0 13:32 pts/0    00:00:00 /bin/bash ./sleepy.sh
                $ ps -ef | grep 12685 | grep -v grep
                    >admin1   12685  7273  0 13:32 pts/0    00:00:00 /bin/bash ./sleepy.sh
                    >admin1   12686 12685  0 13:32 pts/0    00:00:00 sleep 90
                $ pstree -p 12685
                    >sleepy.sh(12685)───sleep(12686)

        Shebang or Not to Shebang

            * If a script does not contain a shebang the commands are executed using your shell;
            * You might get lucky. Maybe. Hopefully.;
            * Different shells have slightly varying syntax.

            More than just shell scripts

            hi.py

                #!/usr/bin/python

                print "This is a Python script."

            The interpreter executes the script

                $ chmod 755 hi.py
                $ ./hi.py
                    >This is a Python script.

        Variables

            * Storage locations that have a name;
            * Name-value pairs;
            * Syntax:
                VARIABLE_NAME='Value'
            * Variables are case sensitive;
            * By convention variables are uppercase.

        Variable Usage

            variable1.sh

                #!/bin/bash

                MY_SHELL="bash"
                echo "I like the $MY_SHELL shell."
                echo "I like the ${MY_SHELL} shell."

            The interpreter executes the script

                $ chmod 755 variable1.sh
                $ ./variable1.sh
                    >I like the bash shell.
                    >I like the bash shell.

            variable2.sh

                #!/bin/bash

                MY_SHELL="bash"
                echo "I am ${MY_SHELL}ing on my keyboard."

            The interpreter executes the script

                $ chmod 755 variable2.sh
                $ ./variable2.sh
                    >I am bashing on my keyboard.

            variable3.sh

                #!/bin/bash

                MY_SHELL="bash"
                echo "I am $MY_SHELLing on my keyboard."

            The interpreter executes the script

                $ chmod 755 variable3.sh
                $ ./variable3.sh
                    >I am bashing on my keyboard.

        Assign command output to a variable

            variable4.sh

                #!/bin/bash

                SERVER_NAME=$(hostname)
                echo "You are running this script on ${SERVER_NAME}."

            The interpreter executes the script

                $ chmod 755 variable4.sh
                $ ./variable4.sh
                    >You are running this script on ubuntu18.

        Variable Names

            Valid:
                FIRST3LETTERS="ABC"
                FIRST_THREE_LETTERS="ABC"
                firstThreeLetters="ABC"

            Invalid:
                3LETERS="ABC"
                first-three-letters="ABC"
                first@Tree@Letters="ABC"

        Tests

            Syntax:
                [ condition-to-test-for ]

            Example:
                [ -e /etc/password ]

        File operators (tests)

            -d FILE     True if file is a directory.
            -e FILE     True if file exists.
            -f FILE     True if file exists and is a regular file.
            -r FILE     True if file readable by you.
            -s FILE     True if file exists and is not empty.
            -w FILE     True if file is writeable by you.
            -x FILE     True if file is executable by you.

        String operators (tests)

            -z STRING   True if string is empty.
            -n STRING   True if string is not empty.
            STRING1 = STRING2
                    True if the strings are equal.
            STRING1 != STRING2
                    True if the strings are not equal.

        Arithmetic operators (test)

            arg1 -eq arg2   True if arg1 is equal to arg2.
            arg1 -ne arg2   True if arg1 is not equal to arg2.

            arg1 -lt arg2   True if arg1 is less than arg2.
            arg1 -le arg2   True if arg1 is less or equal to arg2.

            arg1 -gt arg2   True if arg1 is greater than arg2.
            arg1 -ge arg2   True if arg1 is greater or equal to arg2.
