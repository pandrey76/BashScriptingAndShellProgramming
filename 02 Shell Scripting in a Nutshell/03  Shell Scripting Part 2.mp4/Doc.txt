
    Shell Scripting Part Two.

        Making Decisions - The if statement

            if [ condition-is-true ]
            then
                command 1
                command 2
                command N
            fi

            condition1.sh

                #!/bin/bash

                MY_SHELL="bash"

                if [ "$MY_SHELL" = "bash" ]
                then
                    echo "You seem to like the bash shell."
                fi

            The interpreter executes the script

                $ chmod 755 condition1.sh
                $ ./condition1.sh
                    >You seem to like the bash shell.

        if/else

            if [ condition-is-true ]
            then
                command N1
            else
                command N2
            fi

            condition2.sh

                #!/bin/bash

                MY_SHELL="csh"

                if [ "$MY_SHELL" = "bash" ]
                then
                    echo "You seem to like the bash shell."
                else
                    echo "You don't seem to like the bash shell."
                fi

            The interpreter executes the script

                $ chmod 755 condition2.sh
                $ ./condition2.sh
                    >You don't seem to like the bash shell.

        if/elif/else

            if [ condition-is-true ]
            then
                command N1
            elif [ condition-is-true ]
            then
                command N2
            else
                command N3
            fi

            condition3.sh

                #!/bin/bash

                MY_SHELL="csh"

                if [ "$MY_SHELL" = "bash" ]
                then
                    echo "You seem to like the bash shell."
                else
                    echo "You don't seem to like the bash shell."
                fi

            The interpreter executes the script

                $ chmod 755 condition3.sh
                $ ./condition3.sh
                    >You seem to like the csh shell.

        For loop

            for VARIABLE_NAME in ITEM_1 ITEM_N
            do
                command 1
                command 2
                command N
            done

            loop1.sh

                #!/bin/bash

                for COLOR in red green blue
                do
                    echo "COLOR: $COLOR"
                done

            The interpreter executes the script

                $ chmod 755 loop1.sh
                $ ./loop1.sh
                    >COLOR: red
                    >COLOR: green
                    >COLOR: blue

            loop2.sh

                #!/bin/bash

                COLORS="red green blue"

                for COLOR in $COLORS
                do
                    echo "COLOR: $COLOR"
                done

            The interpreter executes the script

                $ chmod 755 loop2.sh
                $ ./loop2.sh
                    >COLOR: red
                    >COLOR: green
                    >COLOR: blue

            loop3.sh

                #!/bin/bash
                # Attention:
                #    Необходимо внимательно следить за регистром:
                            "ls *jpg" в данном примере не будут работать, т.к. все имена файлов формата "jpg"
                            записанны в в верхнем регистре, будет работать команда "ls *JPG".

                PICTURES=$(ls *JPG)
                DATE=$(date +%F)

                for PICTURE in $PICTURES
                do
                    echo "Renaming ${PICTURE} to ${DATE} - ${PICTURE}"
                    mv ${PICTURE} ${DATE}-${PICTURE}
                done

            The interpreter executes the script

                $ls
                    >condition1.sh  condition2.sh  condition3.sh  loop1.sh  loop2.sh  loop3.sh \
                                     P8090001.JPG  P8090002.JPG  P8090003.JPG  P8090004.JPG  P8090005.JPG  P8090006.JPG
                $ ls *JPG
                    >P8090001.JPG  P8090002.JPG  P8090003.JPG  P8090004.JPG  P8090005.JPG  P8090006.JPG
                $ chmod 755 loop3.sh
                $ ./loop3.sh
                    >Renaming P8090001.JPG to 2020-06-04 - P8090001.JPG
                    >Renaming P8090002.JPG to 2020-06-04 - P8090002.JPG
                    >Renaming P8090003.JPG to 2020-06-04 - P8090003.JPG
                    >Renaming P8090004.JPG to 2020-06-04 - P8090004.JPG
                    >Renaming P8090005.JPG to 2020-06-04 - P8090005.JPG
                    >Renaming P8090006.JPG to 2020-06-04 - P8090006.JPG

        Positional Parameters

            $script.sh parameter.1 parameter.2 parameter.3

                $0: "script.sh"
                $1: "parameter1"
                $2: "parameter2"
                $3: "parameter3"

            archive_user1.sh

                #!/bin/bash

                echo "Executing script: $0"
                echo "Archiving user: $1"

                # Lock the account
                passwd -l $1

                #Create an archive of the home directory.
                tar cf /archive/${1}.tar.gz /home/${1}

            The interpreter executes the script

                $./archive_user1.sh elvis
                    >Executing script: ./archive_user1.sh
                    >Archiving user: elvis
                    >passwd: password expiry information changed.
                    >tar: Removing leading '/' from member names

            archive_user2.sh

                #!/bin/bash

                USER=$1 # The first parameter is the user.

                echo "Executing script: $0"
                echo "Archiving user: $USER"

                # Lock the account
                passwd -l $USER

                #Create an archive of the home directory.
                tar cf /archive/${USER}.tar.gz /home/${USER}

                The interpreter executes the script

                    $./archive_user1.sh elvis
                        >Executing script: ./archive_user1.sh
                        >Archiving user: elvis
                        >passwd: password expiry information changed.
                        >tar: Removing leading '/' from member names

            archive_user3.sh

                #!/bin/bash

                echo "Executing script: $0"
                for USER in $0
                do
                    echo "Archiving user: $USER"
                    # Lock the account
                    passwd -l $USER
                    #Create an archive of the home directory.
                    tar cf /archive/${USER}.tar.gz /home/${USER}
                done

                The interpreter executes the script

                    $./archive_user1.sh chet joe
                        >Executing script: ./archive_user1.sh
                        >Archiving user: chet
                        >passwd: password expiry information changed.
                        >tar: Removing leading '/' from member names
                        >Archiving user: joe
                        >passwd: password expiry information changed.
                        >tar: Removing leading '/' from member names

        Accepting User Input(STDIN)

            The read command accepts STDIN.

            Syntax:
                read -p "PROMPT" VARIABLE

            archive_user4.sh

                #!/bin/bash

                read -p "Enter a user name: " USER
                echo "Archiving user: $USER"

                # Lock the account
                passwd -l $USER
                #Create an archive of the home directory.
                tar cf /archives/${USER}.tar.gz /home/${USER}

                The interpreter executes the script

                    $./archive_user1.sh chet joe
                        >Executing script: ./archive_user4.sh
                        Enter a user name: Joe
                        >Archiving user: Joe
                        >passwd: password expiry information changed.
                        >tar: Removing leading '/' from member names

        Summary

            #!/path/to/interpreter
            VARIABLE_NAME="Value"
            $VARIBLE_NAME
            ${VARIBLE_NAME}
            VARIBLE_NAME=$(command)

            if [ condition-is-true ]
            then
                commands
            elif [ condition-is-true ]
            then
                commands
            else
                commands
            fi

            for VARIABLE_NAME in ITEM_1 ITEM_N
            do
                command 1
                command 2
                command N
            done

            Positional Parameters:
                $0, $1, $2, ... $9
                $@

            Comments start with #.
            Use read to accept input.
